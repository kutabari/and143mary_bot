import asyncio
import random
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import CommandStart
from aiogram.utils.callback_answer import CallbackAnswerMiddleware
from aiogram.client.default import DefaultBotProperties
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiohttp import web  # üëà –î–æ–±–∞–≤–∏–ª–∏

API_TOKEN = '8335218158:AAGQsXxGCc0qDOolAW1SZesJBmi0l5gE2Ng'

bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())
dp.message.middleware(CallbackAnswerMiddleware())

scheduler = AsyncIOScheduler()
chat_ids = set()

# –°–æ–æ–±—â–µ–Ω–∏—è
auto_messages = [
    "–¢—ã –Ω–µ–≤–µ—Ä–æ—è—Ç–µ–Ω ü§ç",
    "–ñ–∏–∑–Ω—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ª—É—á—à–µ —Å —Ç–æ–±–æ–π üå∏",
    "–ü—É—Å—Ç—å —Ç–≤–æ–π –¥–µ–Ω—å –±—É–¥–µ—Ç –ª—ë–≥–∫–∏–º –∫–∞–∫ –æ–±–ª–∞—á–∫–æ ‚òÅÔ∏è",
    "–¢—ã –ø—Ä–∏–Ω–æ—Å–∏—à—å —Å–≤–µ—Ç –≤ —ç—Ç–æ—Ç –º–∏—Ä ‚òÄÔ∏è"
]

button_messages = [
    "–¢—ã –ª—É—á—à–∏–π, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –≤–µ—Ä–∏—à—å –≤ —ç—Ç–æ üí´",
    "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–æ–º–Ω–µ–≤–∞–π—Å—è –≤ —Å–µ–±–µ ‚Äî —Ç—ã —Å–∏—è–µ—à—å! ‚ú®",
    "–¢—ã –¥–æ—Å—Ç–æ–∏–Ω –ª—é–±–≤–∏, —Ä–∞–¥–æ—Å—Ç–∏ –∏ –≤—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ üå∑",
    "–•–æ—Ä–æ—à–µ–≥–æ —Ç–µ–±–µ –¥–Ω—è, –≥–µ—Ä–æ–π ü§ç"
]

# –ö–Ω–æ–ø–∫–∞
keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Ç—ë–ø–ª–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ üíå", callback_data="motivate")]
    ]
)

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    chat_ids.add(message.chat.id)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç—É—Ç, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ, –∫–∞–∫–æ–π —Ç—ã –∫–ª–∞—Å—Å–Ω—ã–π ü´∂", reply_markup=keyboard)

@dp.callback_query()
async def button_handler(callback: types.CallbackQuery):
    msg = random.choice(button_messages)
    await callback.message.answer(msg)
    await callback.answer()

async def scheduled_message():
    for chat_id in chat_ids:
        try:
            msg = random.choice(auto_messages)
            await bot.send_message(chat_id, msg)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

# üëá –§–µ–π–∫–æ–≤—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
async def handle(request):
    return web.Response(text="OK")

async def start():
    scheduler.add_job(scheduled_message, "interval", hours=3)
    scheduler.start()
    await dp.start_polling(bot)

# üëá –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
async def main():
    app = web.Application()
    app.router.add_get("/", handle)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 10000)  # –ü–æ—Ä—Ç 10000
    await site.start()

    await start()

if __name__ == '__main__':
    asyncio.run(main())

